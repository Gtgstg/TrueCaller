#!/usr/bin/env python
import django
from django.conf import settings
from django.apps import AppConfig
from django.core.management.base import BaseCommand
from django.db import models
import getfiles
import inspect
import load
import os
import public
import readme_docstring
import python_readme_generator
import sys


XDG_CONFIG_HOME = os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))
DJANGO_README_GENERATOR_HOME = os.getenv("DJANGO_README_GENERATOR_HOME", os.path.join(XDG_CONFIG_HOME, "django-readme-generator"))

ORDER = ["install", "settings", "models", "commands", "templatetags", "classes", "functions", "executable_modules", "scripts_usage"]

if not settings.configured:
    if "DJANGO_SETTINGS_MODULE" not in os.environ:
        raise OSError("DJANGO_SETTINGS_MODULE environment variable not defined")
    django.setup()


class Commands(readme_docstring.Table):
    """`commands` table class"""
    columns = ["command", "`help`"]

    def __init__(self, objects):
        self.objects = list(sorted(objects,key=lambda obj:obj.__module__))

    def getleftcell(self, obj):
        path = sys.modules[obj.__module__].__file__
        command = os.path.splitext(os.path.basename(path))[0]
        return "`python manage.py %s`" % command

    def getrightcell(self, obj):
        return getattr(obj, "help", "")


class Models(readme_docstring.Table):
    """`models` table class"""
    columns = ["model", "`__doc__`"]

    def __init__(self, objects):
        self.objects = list(objects)

    def getleftcell(self, obj):
        return "`%s`" % obj.__name__


@public.add
class Readme(python_readme_generator.Readme):
    """methods: `getmodules()`, `getapps()`, `getmodels()`, `getcommands()`. sections as methods: `settings()`, `models()`, `commands()`"""
    locations = python_readme_generator.Readme.locations + [DJANGO_README_GENERATOR_HOME]
    order = python_readme_generator.ORDER or ORDER

    def getapps(self):
        """return a list of AppConfig classes"""
        result = set()
        for module in self.getmodules():
            for name, member in inspect.getmembers(module, inspect.isclass):
                if issubclass(member, AppConfig) and member != AppConfig:
                    result.add(member)
        return list(result)

    def getclasses(self):
        """return a list of classes except django models"""
        result = python_readme_generator.Readme.getclasses(self)
        return list(filter(lambda cls: not issubclass(cls, models.Model), result))

    def getmodels(self):
        """return a list of django models"""
        result = set()
        for module in self.getmodules():
            for name, member in inspect.getmembers(module, inspect.isclass):
                if issubclass(member, models.Model) and name[0] != "_" and member.__module__==module.__name__:
                    result.add(member)
        return list(result)

    def getcommandsfiles(self):
        """return a list of commands files"""
        result = []
        files = getfiles.getfiles(os.getcwd())
        for f in files:
            if os.path.splitext(f)[1] == ".py" and os.path.basename(f)[0] != "_":
                if os.path.dirname(f).split(os.sep)[-2:] == ["management", "commands"]:
                    result.append(f)
        return result

    def getcommands(self):
        """return a list of commands classes"""
        result = set()
        files = self.getcommandsfiles()
        for f in files:
            module = load.load(f, f)
            for name, member in inspect.getmembers(module, inspect.isclass):
                if issubclass(member, BaseCommand) and member != BaseCommand:
                    result.add(member)
        return list(result)

    def settings(self):
        apps = self.getapps()
        if not apps:
            return
        names = list(map(lambda app: app.name, apps))
        lines = list(map(lambda name: '    "%s",' % name, names))
        return """```python
INSTALLED_APPS = [
%s
]
```""" % "\n".join(lines)

    def commands(self):
        commands = self.getcommands()
        if commands:
            return Commands(commands)

    def models(self):
        models = self.getmodels()
        if models:
            return Models(models)
